(
 '[DATA]:index=''Examples ⋄ RegEx in action'''
 ''
 '# Further Examples'
 ''
 'Several of the examples use the following vector as the input document:'
 ''
 '~~~'
 '      text'
 'To be or not to be– that is the question:'
 'Whether ''tis nobler in the mind to suffer'
 'The slings and arrows of outrageous fortune,'
 'Or to take arms against a sea of troubles'
 '~~~'
 ''
 '**Replace all upper and lower-case vowels by ''X'':**'
 ''
 '~~~'
 '       (''[aeiou]'' ⎕R ''X'' ⍠ ''IC'' 1) text'
 'TX bX Xr nXt tX bX– thXt Xs thX qXXstXXn:   '
 'WhXthXr ''tXs nXblXr Xn thX mXnd tX sXffXr   '
 'ThX slXngs Xnd XrrXws Xf XXtrXgXXXs fXrtXnX,'
 'Xr tX tXkX Xrms XgXXnst X sXX Xf trXXblXs'
 '~~~'
 ''
 '**Replace only the second vowel on each line by `\VOWEL\`:**'
 '   '
 '~~~'
 '       (''[aeiou]'' ⎕R ''\\VOWEL\\''⍠(''IC'' 1)(''ML'' ¯2)) text'
 'To b\VOWEL\ or not to be– that is the question:   '
 'Wheth\VOWEL\r ''tis nobler in the mind to suffer   '
 'The sl\VOWEL\ngs and arrows of outrageous fortune,'
 'Or t\VOWEL\ take arms against a sea of troubles'
 '~~~'
 ''
 '**Case fold each word:**'
 ''
 '~~~'
 '      (''(?<first>\w)(?<remainder>\w*)'' ⎕R ''\u<first>\l<remainder>'') text'
 'To Be Or Not To Be– That Is The Question:   '
 'Whether ''Tis Nobler In The Mind To Suffer   '
 'The Slings And Arrows Of Outrageous Fortune,'
 'Or To Take Arms Against A Sea Of Troubles  '
 '~~~'
 ''
 '**Extract only the lines with characters `or` (in upper or lower case) on them:**'
 ''
 '~~~'
 '      ↑(''or'' ⎕S ''%'' ⍠ (''IC'' 1)(''ML'' 1)) text'
 'To be or not to be– that is the question:   '
 'The slings and arrows of outrageous fortune,'
 'Or to take arms against a sea of troubles '
 '~~~'
 ''
 '**Identify which lines contain the word `or` (in upper or lower case) on them:**'
 ''
 '~~~'
 '      (''\bor\b''⎕S 2⍠(''IC'' 1)(''ML'' 1))text'
 '0 3'
 '~~~'
 ''
 'Note the difference between the characters `or` (which appear in `fortune`) and the word `or`.'
 ''
 '**Place every non-space sequence of characters in brackets:**'
 ''
 '~~~'
 '      (''[^\s]+'' ⎕R ''(&)'' ) ''To be or not to be, that is the question'''
 '(To) (be) (or) (not) (to) (be,) (that) (is) (the) (question)'
 '~~~'
 ''
 '**Replace all sequences of one or more spaces by newline. Note that the effect of this is dependent on the input format:**'
 ''
 'Character vector input results in a single character vector output with embedded newlines:'
 ''
 '~~~'
 '      ]display (''\s+'' ⎕R ''\r'') ''To be or not to be, that is the question'''
 '┌→───────┐'
 '│To      │'
 '│be      │'
 '│or      │'
 '│not     │'
 '│to      │'
 '│be,     │'
 '│that    │'
 '│is      │'
 '│the     │'
 '│question│'
 '└────────┘'
 '~~~'
 'A vector of two character vectors as input results in a vector of 10 character vectors output:'
 '   '
 '~~~'
 '      ]display (''\s+'' ⎕R ''\r'') ''To be or not to be,'' ''that is the question'''
 '┌→─────────────────────────────────────────────────────────────┐'
 '│ ┌→─┐ ┌→─┐ ┌→─┐ ┌→──┐ ┌→─┐ ┌→──┐ ┌→───┐ ┌→─┐ ┌→──┐ ┌→───────┐ │'
 '│ │To│ │be│ │or│ │not│ │to│ │be,│ │that│ │is│ │the│ │question│ │'
 '│ └──┘ └──┘ └──┘ └───┘ └──┘ └───┘ └────┘ └──┘ └───┘ └────────┘ │'
 '└∊─────────────────────────────────────────────────────────────┘  '
 '~~~'
 ''
 '**Change numerals to their expanded names, using a function:**'
 ''
 '~~~'
 '     ∇r←f a;n'
 '[1]   n←''zero'' ''one'' ''two'' ''three'' ''four'''
 '[2]   n,←''five'' ''six'' ''seven'' ''eight'' ''nine'''
 '[3]   r←'' '',⊃(⍎a.Match)↓n'
 '     ∇'
 '      verbose←(''[0-9]'' ⎕R f)'
 '      verbose ⍕27×56×87'
 ' one three one five four four'
 '~~~'
 (' '⋄)
 '**Swap `red` and `blue`:**'
 ''
 '~~~'
 '      (''red'' ''blue'' ⎕R ''blue'' ''red'') ''red hat blue coat'''
 'blue hat red coat'
 '~~~'
 ''
 '**Convert a comma separated values (CSV) file so that...**'
 ''
 '* dates in the first field are converted from European format to ISO, and '
 '* currency values are converted from Deutsche Marks (DEM) to Euros (DEM 1.95583 to €1). '
 '* The currency conversion requires the use of a function. Note the nested use of `⎕R`.'
 ''
 'Input file:'
 ''
 '~~~'
 '01/03/1980,Widgets,DEM 10.20 '
 '02/04/1980,Bolts,DEM 61.75 '
 '17/06/1980,Nuts; special rate DEM 17.00,DEM 17.00 '
 '18/07/1980,Hammer,DEM 1.25  '
 '~~~'
 ''
 'Output file:'
 ''
 '~~~'
 '1980-03-01,Widgets,€ 5.21 '
 '1980-04-02,Bolts,€ 31.57 '
 '1980-06-17,Nuts; special rate DEM 17.00,€ 8.69 '
 '1980-07-18,Hammer,€ 0.63  '
 '~~~'
 (' '⋄)
 '~~~'
 '     ∇ ret←f a;d;m;y;v'
 '[1]    ⎕IO←0'
 '[2]    :Select a.PatternNum'
 '[3]    :Case 0'
 '[4]        d m y←{a.Match[a.Offsets[⍵+1]+⍳a.Lengths[⍵+1]]}¨⍳3'
 '[5]        ret←y,''-'',m,''-'',d,'','''
 '[6]    :Else'
 '[7]        v←⍎a.Block[a.Offsets[1]+⍳a.Lengths[1]]'
 '[8]        v÷←1.95583'
 '[9]        ret←'',€ '',(''(\d+\.\d\d).*''⎕R''\1'')⍕v'
 '[10]   :EndSelect'
 '     ∇      '
 '     '
 '      in ← ''x.csv'' ⎕NTIE 0'
 '      out ← ''new.csv'' ⎕NCREATE 0'
 '      dateptn←''(\d{2})/(\d{2})/(\d{4}),'''
 '      valptn←'',DEM ([0-9.]+)'''
 '      out (dateptn valptn ⎕R f) in'
 '      ⎕nuntie¨in out'
 '~~~'
 ''
 '**Create a simple profanity filter. For the list of objectionable words:**'
 ''
 '~~~'
 '       profanity←''bleeding'' ''heck'''
 '~~~'
 ''
 'first construct a pattern which will match the words:'
 ''
 '~~~'
 '      ptn←((''^'' ''$'' ''\r\n'') ⎕R ''\\b('' '')\\b'' ''|'''
 '                           ⎕OPT ''Mode'' ''D'') profanity'
 '      ptn'
 '\b(bleeding|heck)\b'
 '~~~'
 ''
 'then a function that uses this pattern:'
 ''
 '~~~'
 '      sanitise←ptn ⎕R ''****'' ⎕opt 1'
 '      sanitise ''"Heck", I said'''
 '"****", I said'
 '~~~'
 ''
 '**Replace the characters `or` with `\u0` without having to escape the backslash:**'
 ''
 'Escaping transformation strings can be a daunting task. To avoid doing so, one can simply enclose the string in braces. This is not a special feature, but '
 'just a consequence of how transformation functions are used.'
 ''
 '~~~'
 '      (''to'' ⎕R {''\u0''})text'
 'To be or not \u0 be– that is the question:'
 'Whether ''tis nobler in the mind \u0 suffer'
 'The slings and arrows of outrageous fortune,'
 'Or \u0 take arms against a sea of troubles'
 '~~~'
)
